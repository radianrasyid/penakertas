// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum userRole {
    ADMIN
    SUPER_ADMIN
    USER
}

enum maritalStatus {
    SINGLE
    MARRIED
    DIVORCED
}

enum userGender {
    MALE
    FEMALE
}

model User {
    id                   String         @id @default(cuid())
    email                String?        @unique
    username             String?        @unique
    employmentId         String?        @unique
    password             String
    firstName            String?
    lastName             String?
    frontTitle           String?
    backTitle            String?
    workGroup            String?
    workUnit             String?
    workPart             String?
    gender               Gender?
    role                 userRole?
    createdAt            DateTime       @default(now()) @map(name: "created_at")
    updatedAt            DateTime       @updatedAt @map(name: "updated_at")
    leaves               UserLeave[]
    childs               Child[]
    relationships        Relationship[]
    identity             String?
    photograph           String?
    familyCertificate    String?
    npwp                 String?
    bpjsOfEmployment     String?
    bpjsOfHealth         String?
    decisionLetter       String?
    latestEducationLevel String?
    maritalStatus        maritalStatus?
    jobDescription       String?
    placementLocation    String?
    startingYear         DateTime?
    decisionLetterNumber String?
    homeAddress          String?
    neighborhood         String?
    neighborhoodHead     String?
    Province             String?
    cityDistrict         String?
    subdistrict          String?
    ward                 String?
    birthPlace           String?
    dateOfBirth          DateTime?
    phoneNumber          String?
    telephone            String?

    @@map(name: "users")
}

model Gender {
    id     String     @id @default(cuid())
    name   userGender
    value  userGender
    userId String     @unique
    user   User       @relation(fields: [userId], references: [id])
}

model WorkGroup {
    id        String     @id @default(cuid())
    name      String     @unique
    value     String
    workUnits WorkUnit[]
}

model WorkUnit {
    id            String     @id @unique @default(cuid())
    name          String
    value         String
    workGroupName String
    workGroup     WorkGroup  @relation(fields: [workGroupName], references: [name])
    workParts     WorkPart[]
}

model WorkPart {
    id           String   @id @default(cuid())
    name         String
    value        String
    workUnitName String
    workUnit     WorkUnit @relation(fields: [workUnitName], references: [id])
}

model Religion {
    id    String @id @default(cuid())
    name  String
    value String
}

model Province {
    id              String         @id @default(cuid())
    name            String         @unique
    value           String
    CitiesDistricts CityDistrict[]
}

model CityDistrict {
    id           String        @id @default(cuid())
    name         String
    value        String
    provinceName String
    province     Province      @relation(fields: [provinceName], references: [id])
    subdistricts Subdistrict[]
}

model Subdistrict {
    id               String       @id @default(cuid())
    name             String
    value            String
    cityDistrictName String
    cityDistricts    CityDistrict @relation(fields: [cityDistrictName], references: [id])
    wards            Ward[]
}

model Ward {
    id              String      @id @default(cuid())
    name            String
    value           String
    subdistrictName String
    subdistrict     Subdistrict @relation(fields: [subdistrictName], references: [id])
}

model LeaveType {
    id          String @id @default(cuid())
    name        String
    description String
    leave       Leave  @relation(fields: [leaveId], references: [id])
    leaveId     String
}

model LeaveFile {
    id    String @id @default(cuid())
    name  String
    value String
}

model Leave {
    id        String      @id @default(cuid())
    skNumber  String
    skDate    DateTime
    startDate DateTime
    endDate   DateTime
    leaveType LeaveType[]
    users     UserLeave[]
}

model UserLeave {
    id      String @id @default(cuid())
    user    User   @relation(fields: [userId], references: [id])
    leave   Leave  @relation(fields: [leaveId], references: [id])
    userId  String
    leaveId String

    @@unique([userId, leaveId])
}

model ChildActivity {
    id      String @id @default(cuid())
    name    String
    value   String
    child   Child  @relation(fields: [childId], references: [id])
    childId String @unique
}

model Child {
    id         String         @id @default(cuid())
    name       String
    childOrder Int
    activity   ChildActivity?
    status     String
    parent     User           @relation(fields: [parentId], references: [id])
    parentId   String
    files      ChildFile[]
}

model ChildStatus {
    id    String @id @default(cuid())
    name  String
    value String
}

model ChildFile {
    id      String @id @default(cuid())
    name    String
    value   String
    child   Child  @relation(fields: [childId], references: [id])
    childId String
}

model Relationship {
    id                  String        @id @default(cuid())
    firstName           String
    lastName            String
    status              maritalStatus
    phoneNumber         String
    photograph          String
    identityCard        String
    bpjsOfEmployment    String
    bpjsOfHealth        String
    marriageCertificate String
    relation            User          @relation(fields: [personRelatedId], references: [id])
    personRelatedId     String
}

model EducationFile {
    id          String    @id @default(cuid())
    name        String
    value       String
    education   Education @relation(fields: [educationId], references: [id])
    educationId String
}

model Education {
    id             String          @id @default(cuid())
    educationPlace String
    educationLevel String
    address        String
    major          String
    graduationYear DateTime
    files          EducationFile[]
}

model Parent {
    id         String @id @default(cuid())
    firstName  String
    lastName   String
    status     String
    profession String
}

model Profession {
    id    String @id @default(cuid())
    name  String
    value String
}

model EducationLevel {
    id             String  @id @default(cuid())
    name           String
    additionalName String?
    value          String
}

model SourceOfSalary {
    id    String @id @default(cuid())
    name  String
    value String
}

model ParentStatus {
    id    String @id @default(cuid())
    name  String
    value String
}

model MaritalStatus {
    id    String @id @default(cuid())
    name  String
    value String
}

model PartnerStatus {
    id    String @id @default(cuid())
    name  String
    value String
}

model ChildSupport {
    id    String @id @default(cuid())
    name  String
    value String
}
